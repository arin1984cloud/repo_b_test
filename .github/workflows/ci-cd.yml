name: CI/CD for Repo A

on:
  repository_dispatch:
    types: [run-ci-cd]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: debug secret
        run: |
          if [ -z "${{ secrets.REPO_A_TOKEN }}" ]; then
            echo "❌ REPO_A_TOKEN is missing"
          else
            echo "✅ REPO_A_TOKEN is set"
          fi
          # Checkout Repo A at the commit SHA received
      - name: Checkout Repo A
        uses: actions/checkout@v4
        with:
          repository: arin1984cloud/repo_a_test
          ref: ${{ github.event.client_payload.ref }}
          token: ${{ secrets.REPO_A_TOKEN }}
          path: repo_a_test

      - name: Get SHA values from payload test
        run: |
          echo "Base SHA: ${{ github.event.client_payload.base_sha }}"
          echo "Head SHA: ${{ github.event.client_payload.head_sha }}"
          BASE_SHA = ${{ github.event.client_payload.base_sha }}
          HEAD_SHA = ${{ github.event.client_payload.head_sha }}

          echo "🔍 Checking changes between $BASE_SHA and $HEAD_SHA"

          MODIFIED_OR_DELETED=$(git diff --name-only --diff-filter=MD "$BASE_SHA" "$HEAD_SHA" | grep 'manifests/.*\.installer\.yaml$' || true)
          
          if [[ -n "$MODIFIED_OR_DELETED" ]]; then
            echo "❌ Found modified or deleted installer files - pipeline will not run:"
            echo "$MODIFIED_OR_DELETED"
            echo "has_new_files=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          NEW_FILES=$(git diff --name-only --diff-filter=A "$BASE_SHA" "$HEAD_SHA" | grep 'manifests/.*\.installer\.yaml$' || true)
          
          if [[ -z "$NEW_FILES" ]]; then
            echo "has_new_files=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ No new installer files detected - skipping pipeline"
          else
            echo "has_new_files=true" >> "$GITHUB_OUTPUT"
            echo "new_files<<EOF" >> "$GITHUB_OUTPUT"
            echo "$NEW_FILES" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            echo "✅ Found new installer files: $NEW_FILES"
          fi
      # Run Repo A’s CI/CD logic here
      - name: Run CI/CD for Repo A
        working-directory: repo_a_test
        run: |
          echo "Running CI/CD pipeline for Repo A"
          # example: npm ci && npm test
          # or: mvn clean install
